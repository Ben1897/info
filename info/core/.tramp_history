'\ \ \ \ \ \ \ \ \ \ \ \ for\ definition\ in\ script.completions\(\)\]'
''
'\@script_method'
'def\ company_complete\(script\)\:'
'\ \ \ \ return\ \[\[definition.name\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ definition.type\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ definition.docstring\(\)\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ definition.module_path\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ definition.line\]'
'\ \ \ \ \ \ \ \ \ \ \ \ for\ definition\ in\ script.completions\(\)\]'
''
'\@script_method'
'def\ show_doc\(script\)\:'
'\ \ \ \ return\ \[\[definition.module_name\,\ definition.docstring\(\)\]'
'\ \ \ \ \ \ \ \ \ \ \ \ for\ definition\ in\ script.goto_definitions\(\)\]'
''
'\@script_method'
'\@process_definitions'
'def\ goto_definitions\(script\)\:'
'\ \ \ \ return\ script.goto_definitions\(\)'
''
'\@script_method'
'\@process_definitions'
'def\ goto_assignments\(script\)\:'
'\ \ \ \ return\ script.goto_assignments\(\)'
''
'\@script_method'
'\@process_definitions'
'def\ usages\(script\)\:'
'\ \ \ \ return\ script.usages\(\)'
''
'\@script_method'
'def\ eldoc\(script\)\:'
'\ \ \ \ signatures\ \=\ script.call_signatures\(\)'
'\ \ \ \ if\ len\(signatures\)\ \=\=\ 1\:'
'\ \ \ \ \ \ \ \ signature\ \=\ signatures\[0\]'
'\ \ \ \ \ \ \ \ return\ \[signature.name\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ signature.index\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[param.description\[6\:\]\ for\ param\ in\ signature.params\]\]'
''
'\#\ Run.'
''
'app\ \=\ \[complete\,\ company_complete\,\ show_doc\,\ goto_definitions\,\ goto_assignments\,\ usages\,\ eldoc\]'
''
'service_factory.service_factory\(app\,\ server_address\,\ 0\,\ \'anaconda_mode\ port\ \{port\}\'\)'
' ~/.emacs.d/.cache/anaconda-mode/0.1.13 0.0.0.0 ''
stty tab0 -inlcr -onlcr -echo kill '^U' erase '^H'
echo foo
PS1=///55f9711387220c73d19e4b1a6b5e09a9\#\$ PS2='' PS3='' PROMPT_COMMAND=''
echo \"`uname -sr`\" 2>/dev/null; echo tramp_exit_status $?
echo foo ; echo bar
set +o vi +o emacs
PATH=/usr/bin:/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin; export PATH
mesg n 2>/dev/null; biff n 2>/dev/null
stty iutf8 2>/dev/null
echo \"`tty`\" 2>/dev/null; echo tramp_exit_status $?
while read var val; do export $var=$val; done <<'8ca178632e14835b4e2b721444346e29'
PAGER cat
INSIDE_EMACS '25.1.1,tramp:2.2.13.25.1'
TERM dumb
LC_CTYPE ''
TMOUT 0
PYTHONUNBUFFERED 1
LC_ALL en_US.utf8
8ca178632e14835b4e2b721444346e29

unset correct autocorrect MAILPATH MAILCHECK MAIL HISTORY CDPATH
cd /home/pjiang6/codes/info/info/core/ &&  exec  env PS1\=/ssh\:pjiang6\@leo\:/home/pjiang6/codes/info/info/core/\ \#\$\  ipython -c '
'from\ __future__\ import\ print_function'
''
'\#\ CLI\ arguments.'
''
'import\ sys'
''
'assert\ len\(sys.argv\)\ \>\ 3\,\ \'CLI\ arguments\:\ \%s\'\ \%\ sys.argv'
''
'server_directory\ \=\ sys.argv\[-3\]'
'server_address\ \=\ sys.argv\[-2\]'
'virtual_environment\ \=\ sys.argv\[-1\]'
''
'\#\ Ensure\ directory.'
''
'import\ os'
''
'server_directory\ \=\ os.path.expanduser\(server_directory\)'
''
'if\ not\ os.path.exists\(server_directory\)\:'
'\ \ \ \ os.makedirs\(server_directory\)'
''
'\#\ Installation\ check.'
''
'jedi_dep\ \=\ \(\'jedi\'\,\ \'0.13.0\'\)'
'service_factory_dep\ \=\ \(\'service_factory\'\,\ \'0.1.5\'\)'
''
'missing_dependencies\ \=\ \[\]'
''
'def\ instrument_installation\(\)\:'
'\ \ \ \ for\ package\ in\ \(jedi_dep\,\ service_factory_dep\)\:'
'\ \ \ \ \ \ \ \ package_is_installed\ \=\ False'
'\ \ \ \ \ \ \ \ for\ path\ in\ os.listdir\(server_directory\)\:'
'\ \ \ \ \ \ \ \ \ \ \ \ path\ \=\ os.path.join\(server_directory\,\ path\)'
'\ \ \ \ \ \ \ \ \ \ \ \ if\ path.endswith\(\'.egg\'\)\ and\ os.path.isdir\(path\)\:'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ path\ not\ in\ sys.path\:'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ sys.path.insert\(0\,\ path\)'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ package\[0\]\ in\ path\:'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ package_is_installed\ \=\ True'
'\ \ \ \ \ \ \ \ if\ not\ package_is_installed\:'
'\ \ \ \ \ \ \ \ \ \ \ \ missing_dependencies.append\(\'\>\=\'.join\(package\)\)'
''
'instrument_installation\(\)'
''
'\#\ Installation.'
''
'def\ install_deps\(\)\:'
'\ \ \ \ import\ site'
'\ \ \ \ import\ setuptools.command.easy_install'
'\ \ \ \ site.addsitedir\(server_directory\)'
'\ \ \ \ cmd\ \=\ \[\'--install-dir\'\,\ server_directory\,'
'\ \ \ \ \ \ \ \ \ \ \ \'--site-dirs\'\,\ server_directory\,'
'\ \ \ \ \ \ \ \ \ \ \ \'--always-copy\'\,\'--always-unzip\'\]'
'\ \ \ \ cmd.extend\(missing_dependencies\)'
'\ \ \ \ setuptools.command.easy_install.main\(cmd\)'
'\ \ \ \ instrument_installation\(\)'
''
'if\ missing_dependencies\:'
'\ \ \ \ install_deps\(\)'
''
'del\ missing_dependencies\[\:\]'
''
'try\:'
'\ \ \ \ import\ jedi'
'except\ ImportError\:'
'\ \ \ \ missing_dependencies.append\(\'\>\=\'.join\(jedi_dep\)\)'
''
'try\:'
'\ \ \ \ import\ service_factory'
'except\ ImportError\:'
'\ \ \ \ missing_dependencies.append\(\'\>\=\'.join\(service_factory_dep\)\)'
''
'\#\ Try\ one\ more\ time\ in\ case\ if\ anaconda\ installation\ gets\ broken\ somehow'
'if\ missing_dependencies\:'
'\ \ \ \ install_deps\(\)'
'\ \ \ \ import\ jedi'
'\ \ \ \ import\ service_factory'
''
'\#\ Setup\ server.'
''
'assert\ jedi.__version__\ \>\=\ jedi_dep\[1\]\,\ \'Jedi\ version\ should\ be\ \>\=\ \%s\,\ current\ version\:\ \%s\'\ \%\ \(jedi_dep\[1\]\,\ jedi.__version__\,\)'
''
'if\ virtual_environment\:'
'\ \ \ \ virtual_environment\ \=\ jedi.create_environment\(virtual_environment\,\ safe\=False\)'
'else\:'
'\ \ \ \ virtual_environment\ \=\ None'
''
'\#\ Define\ JSON-RPC\ application.'
''
'import\ functools'
'import\ threading'
''
'def\ script_method\(f\)\:'
'\ \ \ \ \@functools.wraps\(f\)'
'\ \ \ \ def\ wrapper\(source\,\ line\,\ column\,\ path\)\:'
'\ \ \ \ \ \ \ \ timer\ \=\ threading.Timer\(30.0\,\ sys.exit\)'
'\ \ \ \ \ \ \ \ timer.start\(\)'
'\ \ \ \ \ \ \ \ result\ \=\ f\(jedi.Script\(source\,\ line\,\ column\,\ path\,\ environment\=virtual_environment\)\)'
'\ \ \ \ \ \ \ \ timer.cancel\(\)'
'\ \ \ \ \ \ \ \ return\ result'
'\ \ \ \ return\ wrapper'
''
'def\ process_definitions\(f\)\:'
'\ \ \ \ \@functools.wraps\(f\)'
'\ \ \ \ def\ wrapper\(script\)\:'
'\ \ \ \ \ \ \ \ definitions\ \=\ f\(script\)'
'\ \ \ \ \ \ \ \ if\ len\(definitions\)\ \=\=\ 1\ and\ not\ definitions\[0\].module_path\:'
'\ \ \ \ \ \ \ \ \ \ \ \ return\ \'\%s\ is\ defined\ in\ \%s\ compiled\ module\'\ \%\ \('
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ definitions\[0\].name\,\ definitions\[0\].module_name\)'
'\ \ \ \ \ \ \ \ return\ \[\[definition.module_path\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ definition.line\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ definition.column\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ definition.get_line_code\(\).strip\(\)\]'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ for\ definition\ in\ definitions'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ definition.module_path\]\ or\ None'
'\ \ \ \ return\ wrapper'
''
'\@script_method'
'def\ complete\(script\)\:'
'\ \ \ \ return\ \[\[definition.name\,\ definition.type\]'
'\ \ \ \ \ \ \ \ \ \ \ \ for\ definition\ in\ script.completions\(\)\]'
''
'\@script_method'
'def\ company_complete\(script\)\:'
'\ \ \ \ return\ \[\[definition.name\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ definition.type\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ definition.docstring\(\)\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ definition.module_path\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ definition.line\]'
'\ \ \ \ \ \ \ \ \ \ \ \ for\ definition\ in\ script.completions\(\)\]'
''
'\@script_method'
'def\ show_doc\(script\)\:'
'\ \ \ \ return\ \[\[definition.module_name\,\ definition.docstring\(\)\]'
'\ \ \ \ \ \ \ \ \ \ \ \ for\ definition\ in\ script.goto_definitions\(\)\]'
''
'\@script_method'
'\@process_definitions'
'def\ goto_definitions\(script\)\:'
'\ \ \ \ return\ script.goto_definitions\(\)'
''
'\@script_method'
'\@process_definitions'
'def\ goto_assignments\(script\)\:'
'\ \ \ \ return\ script.goto_assignments\(\)'
''
'\@script_method'
'\@process_definitions'
'def\ usages\(script\)\:'
'\ \ \ \ return\ script.usages\(\)'
''
'\@script_method'
'def\ eldoc\(script\)\:'
'\ \ \ \ signatures\ \=\ script.call_signatures\(\)'
'\ \ \ \ if\ len\(signatures\)\ \=\=\ 1\:'
'\ \ \ \ \ \ \ \ signature\ \=\ signatures\[0\]'
'\ \ \ \ \ \ \ \ return\ \[signature.name\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ signature.index\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[param.description\[6\:\]\ for\ param\ in\ signature.params\]\]'
''
'\#\ Run.'
''
'app\ \=\ \[complete\,\ company_complete\,\ show_doc\,\ goto_definitions\,\ goto_assignments\,\ usages\,\ eldoc\]'
''
'service_factory.service_factory\(app\,\ server_address\,\ 0\,\ \'anaconda_mode\ port\ \{port\}\'\)'
' ~/.emacs.d/.cache/anaconda-mode/0.1.13 0.0.0.0 ''
stty tab0 -inlcr -onlcr -echo kill '^U' erase '^H'
echo foo
PS1=///e9e7fa033842338cecc4a0168ffbd737\#\$ PS2='' PS3='' PROMPT_COMMAND=''
echo \"`uname -sr`\" 2>/dev/null; echo tramp_exit_status $?
echo foo ; echo bar
set +o vi +o emacs
PATH=/usr/bin:/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin; export PATH
mesg n 2>/dev/null; biff n 2>/dev/null
stty iutf8 2>/dev/null
echo \"`tty`\" 2>/dev/null; echo tramp_exit_status $?
while read var val; do export $var=$val; done <<'2722402f305aa19e35f416f9204c0d07'
PAGER cat
INSIDE_EMACS '25.1.1,tramp:2.2.13.25.1'
TERM dumb
LC_CTYPE ''
TMOUT 0
PYTHONUNBUFFERED 1
LC_ALL en_US.utf8
2722402f305aa19e35f416f9204c0d07

unset correct autocorrect MAILPATH MAILCHECK MAIL HISTORY CDPATH
cd /home/pjiang6/codes/info/info/core/ &&  exec  env PS1\=/ssh\:pjiang6\@leo\:/home/pjiang6/codes/info/info/core/\ \#\$\  ipython -c '
'from\ __future__\ import\ print_function'
''
'\#\ CLI\ arguments.'
''
'import\ sys'
''
'assert\ len\(sys.argv\)\ \>\ 3\,\ \'CLI\ arguments\:\ \%s\'\ \%\ sys.argv'
''
'server_directory\ \=\ sys.argv\[-3\]'
'server_address\ \=\ sys.argv\[-2\]'
'virtual_environment\ \=\ sys.argv\[-1\]'
''
'\#\ Ensure\ directory.'
''
'import\ os'
''
'server_directory\ \=\ os.path.expanduser\(server_directory\)'
''
'if\ not\ os.path.exists\(server_directory\)\:'
'\ \ \ \ os.makedirs\(server_directory\)'
''
'\#\ Installation\ check.'
''
'jedi_dep\ \=\ \(\'jedi\'\,\ \'0.13.0\'\)'
'service_factory_dep\ \=\ \(\'service_factory\'\,\ \'0.1.5\'\)'
''
'missing_dependencies\ \=\ \[\]'
''
'def\ instrument_installation\(\)\:'
'\ \ \ \ for\ package\ in\ \(jedi_dep\,\ service_factory_dep\)\:'
'\ \ \ \ \ \ \ \ package_is_installed\ \=\ False'
'\ \ \ \ \ \ \ \ for\ path\ in\ os.listdir\(server_directory\)\:'
'\ \ \ \ \ \ \ \ \ \ \ \ path\ \=\ os.path.join\(server_directory\,\ path\)'
'\ \ \ \ \ \ \ \ \ \ \ \ if\ path.endswith\(\'.egg\'\)\ and\ os.path.isdir\(path\)\:'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ path\ not\ in\ sys.path\:'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ sys.path.insert\(0\,\ path\)'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ package\[0\]\ in\ path\:'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ package_is_installed\ \=\ True'
'\ \ \ \ \ \ \ \ if\ not\ package_is_installed\:'
'\ \ \ \ \ \ \ \ \ \ \ \ missing_dependencies.append\(\'\>\=\'.join\(package\)\)'
''
'instrument_installation\(\)'
''
'\#\ Installation.'
''
'def\ install_deps\(\)\:'
'\ \ \ \ import\ site'
'\ \ \ \ import\ setuptools.command.easy_install'
'\ \ \ \ site.addsitedir\(server_directory\)'
'\ \ \ \ cmd\ \=\ \[\'--install-dir\'\,\ server_directory\,'
'\ \ \ \ \ \ \ \ \ \ \ \'--site-dirs\'\,\ server_directory\,'
'\ \ \ \ \ \ \ \ \ \ \ \'--always-copy\'\,\'--always-unzip\'\]'
'\ \ \ \ cmd.extend\(missing_dependencies\)'
'\ \ \ \ setuptools.command.easy_install.main\(cmd\)'
'\ \ \ \ instrument_installation\(\)'
''
'if\ missing_dependencies\:'
'\ \ \ \ install_deps\(\)'
''
'del\ missing_dependencies\[\:\]'
''
'try\:'
'\ \ \ \ import\ jedi'
'except\ ImportError\:'
'\ \ \ \ missing_dependencies.append\(\'\>\=\'.join\(jedi_dep\)\)'
''
'try\:'
'\ \ \ \ import\ service_factory'
'except\ ImportError\:'
'\ \ \ \ missing_dependencies.append\(\'\>\=\'.join\(service_factory_dep\)\)'
''
'\#\ Try\ one\ more\ time\ in\ case\ if\ anaconda\ installation\ gets\ broken\ somehow'
'if\ missing_dependencies\:'
'\ \ \ \ install_deps\(\)'
'\ \ \ \ import\ jedi'
'\ \ \ \ import\ service_factory'
''
'\#\ Setup\ server.'
''
'assert\ jedi.__version__\ \>\=\ jedi_dep\[1\]\,\ \'Jedi\ version\ should\ be\ \>\=\ \%s\,\ current\ version\:\ \%s\'\ \%\ \(jedi_dep\[1\]\,\ jedi.__version__\,\)'
''
'if\ virtual_environment\:'
'\ \ \ \ virtual_environment\ \=\ jedi.create_environment\(virtual_environment\,\ safe\=False\)'
'else\:'
'\ \ \ \ virtual_environment\ \=\ None'
''
'\#\ Define\ JSON-RPC\ application.'
''
'import\ functools'
'import\ threading'
''
'def\ script_method\(f\)\:'
'\ \ \ \ \@functools.wraps\(f\)'
'\ \ \ \ def\ wrapper\(source\,\ line\,\ column\,\ path\)\:'
'\ \ \ \ \ \ \ \ timer\ \=\ threading.Timer\(30.0\,\ sys.exit\)'
'\ \ \ \ \ \ \ \ timer.start\(\)'
'\ \ \ \ \ \ \ \ result\ \=\ f\(jedi.Script\(source\,\ line\,\ column\,\ path\,\ environment\=virtual_environment\)\)'
'\ \ \ \ \ \ \ \ timer.cancel\(\)'
'\ \ \ \ \ \ \ \ return\ result'
'\ \ \ \ return\ wrapper'
''
'def\ process_definitions\(f\)\:'
'\ \ \ \ \@functools.wraps\(f\)'
'\ \ \ \ def\ wrapper\(script\)\:'
'\ \ \ \ \ \ \ \ definitions\ \=\ f\(script\)'
'\ \ \ \ \ \ \ \ if\ len\(definitions\)\ \=\=\ 1\ and\ not\ definitions\[0\].module_path\:'
'\ \ \ \ \ \ \ \ \ \ \ \ return\ \'\%s\ is\ defined\ in\ \%s\ compiled\ module\'\ \%\ \('
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ definitions\[0\].name\,\ definitions\[0\].module_name\)'
'\ \ \ \ \ \ \ \ return\ \[\[definition.module_path\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ definition.line\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ definition.column\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ definition.get_line_code\(\).strip\(\)\]'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ for\ definition\ in\ definitions'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ definition.module_path\]\ or\ None'
'\ \ \ \ return\ wrapper'
''
'\@script_method'
'def\ complete\(script\)\:'
'\ \ \ \ return\ \[\[definition.name\,\ definition.type\]'
'\ \ \ \ \ \ \ \ \ \ \ \ for\ definition\ in\ script.completions\(\)\]'
''
'\@script_method'
'def\ company_complete\(script\)\:'
'\ \ \ \ return\ \[\[definition.name\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ definition.type\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ definition.docstring\(\)\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ definition.module_path\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ definition.line\]'
'\ \ \ \ \ \ \ \ \ \ \ \ for\ definition\ in\ script.completions\(\)\]'
''
'\@script_method'
'def\ show_doc\(script\)\:'
'\ \ \ \ return\ \[\[definition.module_name\,\ definition.docstring\(\)\]'
'\ \ \ \ \ \ \ \ \ \ \ \ for\ definition\ in\ script.goto_definitions\(\)\]'
''
'\@script_method'
'\@process_definitions'
'def\ goto_definitions\(script\)\:'
'\ \ \ \ return\ script.goto_definitions\(\)'
''
'\@script_method'
'\@process_definitions'
'def\ goto_assignments\(script\)\:'
'\ \ \ \ return\ script.goto_assignments\(\)'
''
'\@script_method'
'\@process_definitions'
'def\ usages\(script\)\:'
'\ \ \ \ return\ script.usages\(\)'
''
'\@script_method'
'def\ eldoc\(script\)\:'
'\ \ \ \ signatures\ \=\ script.call_signatures\(\)'
'\ \ \ \ if\ len\(signatures\)\ \=\=\ 1\:'
'\ \ \ \ \ \ \ \ signature\ \=\ signatures\[0\]'
'\ \ \ \ \ \ \ \ return\ \[signature.name\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ signature.index\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[param.description\[6\:\]\ for\ param\ in\ signature.params\]\]'
''
'\#\ Run.'
''
'app\ \=\ \[complete\,\ company_complete\,\ show_doc\,\ goto_definitions\,\ goto_assignments\,\ usages\,\ eldoc\]'
''
'service_factory.service_factory\(app\,\ server_address\,\ 0\,\ \'anaconda_mode\ port\ \{port\}\'\)'
' ~/.emacs.d/.cache/anaconda-mode/0.1.13 0.0.0.0 ''
stty tab0 -inlcr -onlcr -echo kill '^U' erase '^H'
echo foo
PS1=///e9e7fa033842338cecc4a0168ffbd737\#\$ PS2='' PS3='' PROMPT_COMMAND=''
echo \"`uname -sr`\" 2>/dev/null; echo tramp_exit_status $?
echo foo ; echo bar
set +o vi +o emacs
PATH=/usr/bin:/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin; export PATH
mesg n 2>/dev/null; biff n 2>/dev/null
stty iutf8 2>/dev/null
echo \"`tty`\" 2>/dev/null; echo tramp_exit_status $?
while read var val; do export $var=$val; done <<'2722402f305aa19e35f416f9204c0d07'
PAGER cat
INSIDE_EMACS '25.1.1,tramp:2.2.13.25.1'
TERM dumb
LC_CTYPE ''
TMOUT 0
PYTHONUNBUFFERED 1
LC_ALL en_US.utf8
2722402f305aa19e35f416f9204c0d07

unset correct autocorrect MAILPATH MAILCHECK MAIL HISTORY CDPATH
cd /home/pjiang6/codes/info/info/core/ &&  exec  env PS1\=/ssh\:pjiang6\@leo\:/home/pjiang6/codes/info/info/core/\ \#\$\  ipython -c '
'from\ __future__\ import\ print_function'
''
'\#\ CLI\ arguments.'
''
'import\ sys'
''
'assert\ len\(sys.argv\)\ \>\ 3\,\ \'CLI\ arguments\:\ \%s\'\ \%\ sys.argv'
''
'server_directory\ \=\ sys.argv\[-3\]'
'server_address\ \=\ sys.argv\[-2\]'
'virtual_environment\ \=\ sys.argv\[-1\]'
''
'\#\ Ensure\ directory.'
''
'import\ os'
''
'server_directory\ \=\ os.path.expanduser\(server_directory\)'
''
'if\ not\ os.path.exists\(server_directory\)\:'
'\ \ \ \ os.makedirs\(server_directory\)'
''
'\#\ Installation\ check.'
''
'jedi_dep\ \=\ \(\'jedi\'\,\ \'0.13.0\'\)'
'service_factory_dep\ \=\ \(\'service_factory\'\,\ \'0.1.5\'\)'
''
'missing_dependencies\ \=\ \[\]'
''
'def\ instrument_installation\(\)\:'
'\ \ \ \ for\ package\ in\ \(jedi_dep\,\ service_factory_dep\)\:'
'\ \ \ \ \ \ \ \ package_is_installed\ \=\ False'
'\ \ \ \ \ \ \ \ for\ path\ in\ os.listdir\(server_directory\)\:'
'\ \ \ \ \ \ \ \ \ \ \ \ path\ \=\ os.path.join\(server_directory\,\ path\)'
'\ \ \ \ \ \ \ \ \ \ \ \ if\ path.endswith\(\'.egg\'\)\ and\ os.path.isdir\(path\)\:'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ path\ not\ in\ sys.path\:'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ sys.path.insert\(0\,\ path\)'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ package\[0\]\ in\ path\:'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ package_is_installed\ \=\ True'
'\ \ \ \ \ \ \ \ if\ not\ package_is_installed\:'
'\ \ \ \ \ \ \ \ \ \ \ \ missing_dependencies.append\(\'\>\=\'.join\(package\)\)'
''
'instrument_installation\(\)'
''
'\#\ Installation.'
''
'def\ install_deps\(\)\:'
'\ \ \ \ import\ site'
'\ \ \ \ import\ setuptools.command.easy_install'
'\ \ \ \ site.addsitedir\(server_directory\)'
'\ \ \ \ cmd\ \=\ \[\'--install-dir\'\,\ server_directory\,'
'\ \ \ \ \ \ \ \ \ \ \ \'--site-dirs\'\,\ server_directory\,'
'\ \ \ \ \ \ \ \ \ \ \ \'--always-copy\'\,\'--always-unzip\'\]'
'\ \ \ \ cmd.extend\(missing_dependencies\)'
'\ \ \ \ setuptools.command.easy_install.main\(cmd\)'
'\ \ \ \ instrument_installation\(\)'
''
'if\ missing_dependencies\:'
'\ \ \ \ install_deps\(\)'
''
'del\ missing_dependencies\[\:\]'
''
'try\:'
'\ \ \ \ import\ jedi'
'except\ ImportError\:'
'\ \ \ \ missing_dependencies.append\(\'\>\=\'.join\(jedi_dep\)\)'
''
'try\:'
'\ \ \ \ import\ service_factory'
'except\ ImportError\:'
'\ \ \ \ missing_dependencies.append\(\'\>\=\'.join\(service_factory_dep\)\)'
''
'\#\ Try\ one\ more\ time\ in\ case\ if\ anaconda\ installation\ gets\ broken\ somehow'
'if\ missing_dependencies\:'
'\ \ \ \ install_deps\(\)'
'\ \ \ \ import\ jedi'
'\ \ \ \ import\ service_factory'
''
'\#\ Setup\ server.'
''
'assert\ jedi.__version__\ \>\=\ jedi_dep\[1\]\,\ \'Jedi\ version\ should\ be\ \>\=\ \%s\,\ current\ version\:\ \%s\'\ \%\ \(jedi_dep\[1\]\,\ jedi.__version__\,\)'
''
'if\ virtual_environment\:'
'\ \ \ \ virtual_environment\ \=\ jedi.create_environment\(virtual_environment\,\ safe\=False\)'
'else\:'
'\ \ \ \ virtual_environment\ \=\ None'
''
'\#\ Define\ JSON-RPC\ application.'
''
'import\ functools'
'import\ threading'
''
'def\ script_method\(f\)\:'
'\ \ \ \ \@functools.wraps\(f\)'
'\ \ \ \ def\ wrapper\(source\,\ line\,\ column\,\ path\)\:'
'\ \ \ \ \ \ \ \ timer\ \=\ threading.Timer\(30.0\,\ sys.exit\)'
'\ \ \ \ \ \ \ \ timer.start\(\)'
'\ \ \ \ \ \ \ \ result\ \=\ f\(jedi.Script\(source\,\ line\,\ column\,\ path\,\ environment\=virtual_environment\)\)'
'\ \ \ \ \ \ \ \ timer.cancel\(\)'
'\ \ \ \ \ \ \ \ return\ result'
'\ \ \ \ return\ wrapper'
''
'def\ process_definitions\(f\)\:'
'\ \ \ \ \@functools.wraps\(f\)'
'\ \ \ \ def\ wrapper\(script\)\:'
'\ \ \ \ \ \ \ \ definitions\ \=\ f\(script\)'
'\ \ \ \ \ \ \ \ if\ len\(definitions\)\ \=\=\ 1\ and\ not\ definitions\[0\].module_path\:'
'\ \ \ \ \ \ \ \ \ \ \ \ return\ \'\%s\ is\ defined\ in\ \%s\ compiled\ module\'\ \%\ \('
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ definitions\[0\].name\,\ definitions\[0\].module_name\)'
'\ \ \ \ \ \ \ \ return\ \[\[definition.module_path\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ definition.line\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ definition.column\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ definition.get_line_code\(\).strip\(\)\]'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ for\ definition\ in\ definitions'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ definition.module_path\]\ or\ None'
'\ \ \ \ return\ wrapper'
''
'\@script_method'
'def\ complete\(script\)\:'
'\ \ \ \ return\ \[\[definition.name\,\ definition.type\]'
'\ \ \ \ \ \ \ \ \ \ \ \ for\ definition\ in\ script.completions\(\)\]'
''
'\@script_method'
'def\ company_complete\(script\)\:'
'\ \ \ \ return\ \[\[definition.name\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ definition.type\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ definition.docstring\(\)\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ definition.module_path\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ definition.line\]'
'\ \ \ \ \ \ \ \ \ \ \ \ for\ definition\ in\ script.completions\(\)\]'
''
'\@script_method'
'def\ show_doc\(script\)\:'
'\ \ \ \ return\ \[\[definition.module_name\,\ definition.docstring\(\)\]'
'\ \ \ \ \ \ \ \ \ \ \ \ for\ definition\ in\ script.goto_definitions\(\)\]'
''
'\@script_method'
'\@process_definitions'
'def\ goto_definitions\(script\)\:'
'\ \ \ \ return\ script.goto_definitions\(\)'
''
'\@script_method'
'\@process_definitions'
'def\ goto_assignments\(script\)\:'
'\ \ \ \ return\ script.goto_assignments\(\)'
''
'\@script_method'
'\@process_definitions'
'def\ usages\(script\)\:'
'\ \ \ \ return\ script.usages\(\)'
''
'\@script_method'
'def\ eldoc\(script\)\:'
'\ \ \ \ signatures\ \=\ script.call_signatures\(\)'
'\ \ \ \ if\ len\(signatures\)\ \=\=\ 1\:'
'\ \ \ \ \ \ \ \ signature\ \=\ signatures\[0\]'
'\ \ \ \ \ \ \ \ return\ \[signature.name\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ signature.index\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[param.description\[6\:\]\ for\ param\ in\ signature.params\]\]'
''
'\#\ Run.'
''
'app\ \=\ \[complete\,\ company_complete\,\ show_doc\,\ goto_definitions\,\ goto_assignments\,\ usages\,\ eldoc\]'
''
'service_factory.service_factory\(app\,\ server_address\,\ 0\,\ \'anaconda_mode\ port\ \{port\}\'\)'
' ~/.emacs.d/.cache/anaconda-mode/0.1.13 0.0.0.0 ''
stty tab0 -inlcr -onlcr -echo kill '^U' erase '^H'
echo foo
PS1=///df7ffba05079fc2791f0736e42eb4d98\#\$ PS2='' PS3='' PROMPT_COMMAND=''
echo \"`uname -sr`\" 2>/dev/null; echo tramp_exit_status $?
echo foo ; echo bar
set +o vi +o emacs
PATH=/usr/bin:/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin; export PATH
mesg n 2>/dev/null; biff n 2>/dev/null
stty iutf8 2>/dev/null
echo \"`tty`\" 2>/dev/null; echo tramp_exit_status $?
while read var val; do export $var=$val; done <<'b440bf4c74e736aa1c4a37fbbee1d066'
PAGER cat
INSIDE_EMACS '25.1.1,tramp:2.2.13.25.1'
TERM dumb
LC_CTYPE ''
TMOUT 0
PYTHONUNBUFFERED 1
LC_ALL en_US.utf8
b440bf4c74e736aa1c4a37fbbee1d066

unset correct autocorrect MAILPATH MAILCHECK MAIL HISTORY CDPATH
cd /home/pjiang6/codes/info/info/core/ &&  exec  env PS1\=/ssh\:pjiang6\@leo\:/home/pjiang6/codes/info/info/core/\ \#\$\  ipython -c '
'from\ __future__\ import\ print_function'
''
'\#\ CLI\ arguments.'
''
'import\ sys'
''
'assert\ len\(sys.argv\)\ \>\ 3\,\ \'CLI\ arguments\:\ \%s\'\ \%\ sys.argv'
''
'server_directory\ \=\ sys.argv\[-3\]'
'server_address\ \=\ sys.argv\[-2\]'
'virtual_environment\ \=\ sys.argv\[-1\]'
''
'\#\ Ensure\ directory.'
''
'import\ os'
''
'server_directory\ \=\ os.path.expanduser\(server_directory\)'
''
'if\ not\ os.path.exists\(server_directory\)\:'
'\ \ \ \ os.makedirs\(server_directory\)'
''
'\#\ Installation\ check.'
''
'jedi_dep\ \=\ \(\'jedi\'\,\ \'0.13.0\'\)'
'service_factory_dep\ \=\ \(\'service_factory\'\,\ \'0.1.5\'\)'
''
'missing_dependencies\ \=\ \[\]'
''
'def\ instrument_installation\(\)\:'
'\ \ \ \ for\ package\ in\ \(jedi_dep\,\ service_factory_dep\)\:'
'\ \ \ \ \ \ \ \ package_is_installed\ \=\ False'
'\ \ \ \ \ \ \ \ for\ path\ in\ os.listdir\(server_directory\)\:'
'\ \ \ \ \ \ \ \ \ \ \ \ path\ \=\ os.path.join\(server_directory\,\ path\)'
'\ \ \ \ \ \ \ \ \ \ \ \ if\ path.endswith\(\'.egg\'\)\ and\ os.path.isdir\(path\)\:'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ path\ not\ in\ sys.path\:'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ sys.path.insert\(0\,\ path\)'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ package\[0\]\ in\ path\:'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ package_is_installed\ \=\ True'
'\ \ \ \ \ \ \ \ if\ not\ package_is_installed\:'
'\ \ \ \ \ \ \ \ \ \ \ \ missing_dependencies.append\(\'\>\=\'.join\(package\)\)'
''
'instrument_installation\(\)'
''
'\#\ Installation.'
''
'def\ install_deps\(\)\:'
'\ \ \ \ import\ site'
'\ \ \ \ import\ setuptools.command.easy_install'
'\ \ \ \ site.addsitedir\(server_directory\)'
'\ \ \ \ cmd\ \=\ \[\'--install-dir\'\,\ server_directory\,'
'\ \ \ \ \ \ \ \ \ \ \ \'--site-dirs\'\,\ server_directory\,'
'\ \ \ \ \ \ \ \ \ \ \ \'--always-copy\'\,\'--always-unzip\'\]'
'\ \ \ \ cmd.extend\(missing_dependencies\)'
'\ \ \ \ setuptools.command.easy_install.main\(cmd\)'
'\ \ \ \ instrument_installation\(\)'
''
'if\ missing_dependencies\:'
'\ \ \ \ install_deps\(\)'
''
'del\ missing_dependencies\[\:\]'
''
'try\:'
'\ \ \ \ import\ jedi'
'except\ ImportError\:'
'\ \ \ \ missing_dependencies.append\(\'\>\=\'.join\(jedi_dep\)\)'
''
'try\:'
'\ \ \ \ import\ service_factory'
'except\ ImportError\:'
'\ \ \ \ missing_dependencies.append\(\'\>\=\'.join\(service_factory_dep\)\)'
''
'\#\ Try\ one\ more\ time\ in\ case\ if\ anaconda\ installation\ gets\ broken\ somehow'
'if\ missing_dependencies\:'
'\ \ \ \ install_deps\(\)'
'\ \ \ \ import\ jedi'
'\ \ \ \ import\ service_factory'
''
'\#\ Setup\ server.'
''
'assert\ jedi.__version__\ \>\=\ jedi_dep\[1\]\,\ \'Jedi\ version\ should\ be\ \>\=\ \%s\,\ current\ version\:\ \%s\'\ \%\ \(jedi_dep\[1\]\,\ jedi.__version__\,\)'
''
'if\ virtual_environment\:'
'\ \ \ \ virtual_environment\ \=\ jedi.create_environment\(virtual_environment\,\ safe\=False\)'
'else\:'
'\ \ \ \ virtual_environment\ \=\ None'
''
'\#\ Define\ JSON-RPC\ application.'
''
'import\ functools'
'import\ threading'
''
'def\ script_method\(f\)\:'
'\ \ \ \ \@functools.wraps\(f\)'
'\ \ \ \ def\ wrapper\(source\,\ line\,\ column\,\ path\)\:'
'\ \ \ \ \ \ \ \ timer\ \=\ threading.Timer\(30.0\,\ sys.exit\)'
'\ \ \ \ \ \ \ \ timer.start\(\)'
'\ \ \ \ \ \ \ \ result\ \=\ f\(jedi.Script\(source\,\ line\,\ column\,\ path\,\ environment\=virtual_environment\)\)'
'\ \ \ \ \ \ \ \ timer.cancel\(\)'
'\ \ \ \ \ \ \ \ return\ result'
'\ \ \ \ return\ wrapper'
''
'def\ process_definitions\(f\)\:'
'\ \ \ \ \@functools.wraps\(f\)'
'\ \ \ \ def\ wrapper\(script\)\:'
'\ \ \ \ \ \ \ \ definitions\ \=\ f\(script\)'
'\ \ \ \ \ \ \ \ if\ len\(definitions\)\ \=\=\ 1\ and\ not\ definitions\[0\].module_path\:'
'\ \ \ \ \ \ \ \ \ \ \ \ return\ \'\%s\ is\ defined\ in\ \%s\ compiled\ module\'\ \%\ \('
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ definitions\[0\].name\,\ definitions\[0\].module_name\)'
'\ \ \ \ \ \ \ \ return\ \[\[definition.module_path\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ definition.line\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ definition.column\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ definition.get_line_code\(\).strip\(\)\]'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ for\ definition\ in\ definitions'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ definition.module_path\]\ or\ None'
'\ \ \ \ return\ wrapper'
''
'\@script_method'
'def\ complete\(script\)\:'
'\ \ \ \ return\ \[\[definition.name\,\ definition.type\]'
'\ \ \ \ \ \ \ \ \ \ \ \ for\ definition\ in\ script.completions\(\)\]'
''
'\@script_method'
'def\ company_complete\(script\)\:'
'\ \ \ \ return\ \[\[definition.name\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ definition.type\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ definition.docstring\(\)\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ definition.module_path\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ definition.line\]'
'\ \ \ \ \ \ \ \ \ \ \ \ for\ definition\ in\ script.completions\(\)\]'
''
'\@script_method'
'def\ show_doc\(script\)\:'
'\ \ \ \ return\ \[\[definition.module_name\,\ definition.docstring\(\)\]'
'\ \ \ \ \ \ \ \ \ \ \ \ for\ definition\ in\ script.goto_definitions\(\)\]'
''
'\@script_method'
'\@process_definitions'
'def\ goto_definitions\(script\)\:'
'\ \ \ \ return\ script.goto_definitions\(\)'
''
'\@script_method'
'\@process_definitions'
'def\ goto_assignments\(script\)\:'
'\ \ \ \ return\ script.goto_assignments\(\)'
''
'\@script_method'
'\@process_definitions'
'def\ usages\(script\)\:'
'\ \ \ \ return\ script.usages\(\)'
''
'\@script_method'
'def\ eldoc\(script\)\:'
'\ \ \ \ signatures\ \=\ script.call_signatures\(\)'
'\ \ \ \ if\ len\(signatures\)\ \=\=\ 1\:'
'\ \ \ \ \ \ \ \ signature\ \=\ signatures\[0\]'
'\ \ \ \ \ \ \ \ return\ \[signature.name\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ signature.index\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[param.description\[6\:\]\ for\ param\ in\ signature.params\]\]'
''
'\#\ Run.'
''
'app\ \=\ \[complete\,\ company_complete\,\ show_doc\,\ goto_definitions\,\ goto_assignments\,\ usages\,\ eldoc\]'
''
'service_factory.service_factory\(app\,\ server_address\,\ 0\,\ \'anaconda_mode\ port\ \{port\}\'\)'
' ~/.emacs.d/.cache/anaconda-mode/0.1.13 0.0.0.0 ''
stty tab0 -inlcr -onlcr -echo kill '^U' erase '^H'
echo foo
PS1=///df7ffba05079fc2791f0736e42eb4d98\#\$ PS2='' PS3='' PROMPT_COMMAND=''
echo \"`uname -sr`\" 2>/dev/null; echo tramp_exit_status $?
locale -a
echo foo ; echo bar
set +o vi +o emacs
echo \"`getconf PATH 2>/dev/null`\" 2>/dev/null; echo tramp_exit_status $?
test 0 2>/dev/null; echo tramp_exit_status $?
test -d /usr/bin 2>/dev/null; echo tramp_exit_status $?
test -d /bin 2>/dev/null; echo tramp_exit_status $?
test -d /sbin 2>/dev/null; echo tramp_exit_status $?
test -d /usr/sbin 2>/dev/null; echo tramp_exit_status $?
test -d /usr/local/bin 2>/dev/null; echo tramp_exit_status $?
test -d /usr/local/sbin 2>/dev/null; echo tramp_exit_status $?
test -d /local/bin 2>/dev/null; echo tramp_exit_status $?
test -d /local/freeware/bin 2>/dev/null; echo tramp_exit_status $?
test -d /local/gnu/bin 2>/dev/null; echo tramp_exit_status $?
test -d /usr/freeware/bin 2>/dev/null; echo tramp_exit_status $?
test -d /usr/pkg/bin 2>/dev/null; echo tramp_exit_status $?
test -d /usr/contrib/bin 2>/dev/null; echo tramp_exit_status $?
test -d /opt/bin 2>/dev/null; echo tramp_exit_status $?
test -d /opt/sbin 2>/dev/null; echo tramp_exit_status $?
test -d /opt/local/bin 2>/dev/null; echo tramp_exit_status $?
PATH=/usr/bin:/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin; export PATH
echo ~root
mesg n 2>/dev/null; biff n 2>/dev/null
stty iutf8 2>/dev/null
echo \"`tty`\" 2>/dev/null; echo tramp_exit_status $?
while read var val; do export $var=$val; done <<'b440bf4c74e736aa1c4a37fbbee1d066'
PAGER cat
INSIDE_EMACS '25.1.1,tramp:2.2.13.25.1'
TERM dumb
LC_CTYPE ''
TMOUT 0
PYTHONUNBUFFERED 1
LC_ALL en_US.utf8
b440bf4c74e736aa1c4a37fbbee1d066

unset correct autocorrect MAILPATH MAILCHECK MAIL HISTORY CDPATH
cd /home/pjiang6/codes/info/info/core/ &&  exec  env PS1\=/ssh\:pjiang6\@leo\:/home/pjiang6/codes/info/info/core/\ \#\$\  ipython -c '
'from\ __future__\ import\ print_function'
''
'\#\ CLI\ arguments.'
''
'import\ sys'
''
'assert\ len\(sys.argv\)\ \>\ 3\,\ \'CLI\ arguments\:\ \%s\'\ \%\ sys.argv'
''
'server_directory\ \=\ sys.argv\[-3\]'
'server_address\ \=\ sys.argv\[-2\]'
'virtual_environment\ \=\ sys.argv\[-1\]'
''
'\#\ Ensure\ directory.'
''
'import\ os'
''
'server_directory\ \=\ os.path.expanduser\(server_directory\)'
''
'if\ not\ os.path.exists\(server_directory\)\:'
'\ \ \ \ os.makedirs\(server_directory\)'
''
'\#\ Installation\ check.'
''
'jedi_dep\ \=\ \(\'jedi\'\,\ \'0.13.0\'\)'
'service_factory_dep\ \=\ \(\'service_factory\'\,\ \'0.1.5\'\)'
''
'missing_dependencies\ \=\ \[\]'
''
'def\ instrument_installation\(\)\:'
'\ \ \ \ for\ package\ in\ \(jedi_dep\,\ service_factory_dep\)\:'
'\ \ \ \ \ \ \ \ package_is_installed\ \=\ False'
'\ \ \ \ \ \ \ \ for\ path\ in\ os.listdir\(server_directory\)\:'
'\ \ \ \ \ \ \ \ \ \ \ \ path\ \=\ os.path.join\(server_directory\,\ path\)'
'\ \ \ \ \ \ \ \ \ \ \ \ if\ path.endswith\(\'.egg\'\)\ and\ os.path.isdir\(path\)\:'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ path\ not\ in\ sys.path\:'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ sys.path.insert\(0\,\ path\)'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ package\[0\]\ in\ path\:'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ package_is_installed\ \=\ True'
'\ \ \ \ \ \ \ \ if\ not\ package_is_installed\:'
'\ \ \ \ \ \ \ \ \ \ \ \ missing_dependencies.append\(\'\>\=\'.join\(package\)\)'
''
'instrument_installation\(\)'
''
'\#\ Installation.'
''
'def\ install_deps\(\)\:'
'\ \ \ \ import\ site'
'\ \ \ \ import\ setuptools.command.easy_install'
'\ \ \ \ site.addsitedir\(server_directory\)'
'\ \ \ \ cmd\ \=\ \[\'--install-dir\'\,\ server_directory\,'
'\ \ \ \ \ \ \ \ \ \ \ \'--site-dirs\'\,\ server_directory\,'
'\ \ \ \ \ \ \ \ \ \ \ \'--always-copy\'\,\'--always-unzip\'\]'
'\ \ \ \ cmd.extend\(missing_dependencies\)'
'\ \ \ \ setuptools.command.easy_install.main\(cmd\)'
'\ \ \ \ instrument_installation\(\)'
''
'if\ missing_dependencies\:'
'\ \ \ \ install_deps\(\)'
''
'del\ missing_dependencies\[\:\]'
''
'try\:'
'\ \ \ \ import\ jedi'
'except\ ImportError\:'
'\ \ \ \ missing_dependencies.append\(\'\>\=\'.join\(jedi_dep\)\)'
''
'try\:'
'\ \ \ \ import\ service_factory'
'except\ ImportError\:'
'\ \ \ \ missing_dependencies.append\(\'\>\=\'.join\(service_factory_dep\)\)'
''
'\#\ Try\ one\ more\ time\ in\ case\ if\ anaconda\ installation\ gets\ broken\ somehow'
'if\ missing_dependencies\:'
'\ \ \ \ install_deps\(\)'
'\ \ \ \ import\ jedi'
'\ \ \ \ import\ service_factory'
''
'\#\ Setup\ server.'
''
'assert\ jedi.__version__\ \>\=\ jedi_dep\[1\]\,\ \'Jedi\ version\ should\ be\ \>\=\ \%s\,\ current\ version\:\ \%s\'\ \%\ \(jedi_dep\[1\]\,\ jedi.__version__\,\)'
''
'if\ virtual_environment\:'
'\ \ \ \ virtual_environment\ \=\ jedi.create_environment\(virtual_environment\,\ safe\=False\)'
'else\:'
'\ \ \ \ virtual_environment\ \=\ None'
''
'\#\ Define\ JSON-RPC\ application.'
''
'import\ functools'
'import\ threading'
''
'def\ script_method\(f\)\:'
'\ \ \ \ \@functools.wraps\(f\)'
'\ \ \ \ def\ wrapper\(source\,\ line\,\ column\,\ path\)\:'
'\ \ \ \ \ \ \ \ timer\ \=\ threading.Timer\(30.0\,\ sys.exit\)'
'\ \ \ \ \ \ \ \ timer.start\(\)'
'\ \ \ \ \ \ \ \ result\ \=\ f\(jedi.Script\(source\,\ line\,\ column\,\ path\,\ environment\=virtual_environment\)\)'
'\ \ \ \ \ \ \ \ timer.cancel\(\)'
'\ \ \ \ \ \ \ \ return\ result'
'\ \ \ \ return\ wrapper'
''
'def\ process_definitions\(f\)\:'
'\ \ \ \ \@functools.wraps\(f\)'
'\ \ \ \ def\ wrapper\(script\)\:'
'\ \ \ \ \ \ \ \ definitions\ \=\ f\(script\)'
'\ \ \ \ \ \ \ \ if\ len\(definitions\)\ \=\=\ 1\ and\ not\ definitions\[0\].module_path\:'
'\ \ \ \ \ \ \ \ \ \ \ \ return\ \'\%s\ is\ defined\ in\ \%s\ compiled\ module\'\ \%\ \('
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ definitions\[0\].name\,\ definitions\[0\].module_name\)'
'\ \ \ \ \ \ \ \ return\ \[\[definition.module_path\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ definition.line\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ definition.column\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ definition.get_line_code\(\).strip\(\)\]'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ for\ definition\ in\ definitions'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ definition.module_path\]\ or\ None'
'\ \ \ \ return\ wrapper'
''
'\@script_method'
'def\ complete\(script\)\:'
'\ \ \ \ return\ \[\[definition.name\,\ definition.type\]'
'\ \ \ \ \ \ \ \ \ \ \ \ for\ definition\ in\ script.completions\(\)\]'
''
'\@script_method'
'def\ company_complete\(script\)\:'
'\ \ \ \ return\ \[\[definition.name\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ definition.type\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ definition.docstring\(\)\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ definition.module_path\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ definition.line\]'
'\ \ \ \ \ \ \ \ \ \ \ \ for\ definition\ in\ script.completions\(\)\]'
''
'\@script_method'
'def\ show_doc\(script\)\:'
'\ \ \ \ return\ \[\[definition.module_name\,\ definition.docstring\(\)\]'
'\ \ \ \ \ \ \ \ \ \ \ \ for\ definition\ in\ script.goto_definitions\(\)\]'
''
'\@script_method'
'\@process_definitions'
'def\ goto_definitions\(script\)\:'
'\ \ \ \ return\ script.goto_definitions\(\)'
''
'\@script_method'
'\@process_definitions'
'def\ goto_assignments\(script\)\:'
'\ \ \ \ return\ script.goto_assignments\(\)'
''
'\@script_method'
'\@process_definitions'
'def\ usages\(script\)\:'
'\ \ \ \ return\ script.usages\(\)'
''
'\@script_method'
'def\ eldoc\(script\)\:'
'\ \ \ \ signatures\ \=\ script.call_signatures\(\)'
'\ \ \ \ if\ len\(signatures\)\ \=\=\ 1\:'
'\ \ \ \ \ \ \ \ signature\ \=\ signatures\[0\]'
'\ \ \ \ \ \ \ \ return\ \[signature.name\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ signature.index\,'
'\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[param.description\[6\:\]\ for\ param\ in\ signature.params\]\]'
''
'\#\ Run.'
''
'app\ \=\ \[complete\,\ company_complete\,\ show_doc\,\ goto_definitions\,\ goto_assignments\,\ usages\,\ eldoc\]'
''
'service_factory.service_factory\(app\,\ server_address\,\ 0\,\ \'anaconda_mode\ port\ \{port\}\'\)'
' ~/.emacs.d/.cache/anaconda-mode/0.1.13 0.0.0.0 ''
